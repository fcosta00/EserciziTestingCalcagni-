# 1° punto
str(datax)
load('Datasets-20221124/mach/mach.Rdata')
setwd("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing")
setwd("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing")
load('Datasets-20221124/mach/mach.Rdata')
# 1° punto
str(datax)
summary(datax)  # insieme di punteggi categoriali da -8 a 8 su 20 item divisi per nazione
# 2° punto
dataxITA <- datax[datax$country == "IT",]
dataxITA <- dataxITA[,1:20]
# 3° punto
library(lavaan)
heatmap(cor(dataxITA), scale = 'none')
mod_uni = ' lat1=~ Q6A + Q10A + Q7A + Q3A + Q9A + Q16A \n '
mod_uni_fit_UVI = cfa( model = mod_uni, data = dataxITA, std.lv = TRUE)
summary(mod_uni_fit_UVI, fit.measures = TRUE)
# 5° punto
source('Utilities-20221124/reliability_semTools.R')
reliability(mod_uni_fit_UVI)
# 6° punto
mod_plu = ' lat1=~ Q6A + Q7A \n
lat2=~ Q4A + Q11A \n
lat3=~ Q1A + Q2A '
mod_plu_fit_UVI = cfa( model = mod_plu, data = dataxITA, std.lv = TRUE)
summary(mod_plu_fit_UVI, fit.measures = TRUE)
x11();semPaths(object = mod_plu_fit_UVI, what="model", whatLabels = "std")
# 4° punto
library(psych)
alpha(dataxITA)
# 1° punto
str(datax)
colnames(dataxITA)
mod_uni = ' lat1=~ Q1A + Q2A + Q3A + Q4A + Q5A + Q6A + Q7A + Q8A + Q9A + Q10A + Q11A + Q12A + Q13A + Q14A + Q15A + Q16A + Q17A + Q18A + Q19A + Q20A \n'
mod_uni_fit_UVI = cfa( model = mod_uni, data = dataxITA, std.lv = TRUE)
summary(mod_uni_fit_UVI, fit.measures = TRUE, )
summary(mod_uni_fit_UVI, fit.measures = TRUE, standardized=TRUE )
summary(mod_uni_fit_UVI, standardized=TRUE )
summary(mod_uni_fit_UVI, fit.measures = TRUE,standardized=TRUE )
library(semPlot)
x11();semPaths(object = mod_uni_fit_UVI, what="model", whatLabels = "std")
# 5° punto
source('Utilities-20221124/reliability_semTools.R')
reliability(mod_uni_fit_UVI)
round(reliability(mod_uni_fit_UVI), 2)
round(reliability(mod_uni_fit_UVI),5)
library(datasets)
str(attitude)
summary(attitude)
att2 <- attitude[,2:7] #prendo solo le colonne da 2 a 7, escludo per cui la prima variabile oddervata
heatmap(cor(dataxITA), scale = 'none')
mod_uni = ' lat1=~ Q1A + Q2A + Q3A + Q4A + Q5A + Q6A + Q7A + Q8A + Q9A + Q10A + Q11A + Q12A + Q13A + Q14A + Q15A + Q16A + Q17A + Q18A + Q19A + Q20A \n'
mod_uni_fit_UVI = cfa( model = mod_uni, data = dataxITA, std.lv = TRUE)
summary(mod_uni_fit_UVI, fit.measures = TRUE,standardized=TRUE )
# 5° punto
source('Utilities-20221124/reliability_semTools.R')
round(reliability(mod_uni_fit_UVI),5)
# 6° punto
mod_plu = ' lat1=~ Q13A + Q1A + Q20A + Q12A + Q18A + Q5A + Q8A + Q2A + Q15A + Q19A \n
lat2=~ Q7A + Q6A + Q10A + Q3A + Q9A + Q16A + Q4A + Q14A + Q17A + Q11A \n'
mod_plu_fit_UVI = cfa( model = mod_plu, data = dataxITA, std.lv = TRUE)
summary(mod_plu_fit_UVI, fit.measures = TRUE, standardized=TRUE)
x11();semPaths(object = mod_plu_fit_UVI, what="model", whatLabels = "std")
# 7° piano
cfa_fits = matrix(NA, 2,6)  #creo mattice nuovo
cfa_fits[1,] = fitmeasures(object = mod_uni_fit_UVI,
fit.measures = c('RMSEA', 'CFI', 'AIC', 'chisq', 'df', 'npar'))
cfa_fits[2,] = fitmeasures(object = mod_plu_fit_UVI,
fit.measures = c('RMSEA', 'CFI', 'AIC', 'chisq', 'df', 'npar'))
colnames(cfa_fits) = c('RMSEA', 'CFI', 'AIC', 'chisq', 'df', 'npar')
rownames(cfa_fits) = c('uni', 'plu')
cfa_fits
round(cfa_fits, 4)
reliability(mod_plu_fit_UVI)
setwd("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing/EserciziTestingCalcagni-")
source('Datasets-20221124/bfi_reversed.csv')
source('Utilities-20221124/split_dataset.R')
load('Datasets-20221124/bfi_reversed.csv')
bfi_reversed <- read.csv("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing/EserciziTestingCalcagni-/Datasets-20221124/bfi_reversed.csv")
View(bfi_reversed)
str(bfi_reversed)
summary(bfi_reversed)
str(bfi_reversed)
bfi_reversed$gender <- as.factor(bfi_reversed$gender)
str(bfi_reversed)
library(lavaan); library(semPlot)
summary(bfi)
x11();par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi)[j])
}
summary(bfi)
bfi_reversed$gender <- as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
summary(bfi)
str(bfi_reversed)
bfi_reversed$gender = as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
source('Utilities-20221124/split_dataset.R')
View(bfi_reversed)
str(bfi_reversed)
summary(bfi_reversed) #gender age e education sono categoriali
bfi_reversed$gender = as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
library(lavaan); library(semPlot)
summary(bfi)
#usa l'uguale
bfi_reversed$gender = as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
library(lavaan); library(semPlot)
summary(bfi)
x11();par(mfrow=c(5,5))
summary(bfi)
#usa l'uguale
bfi_reversed$gender = as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
summary(bfi)
library(lavaan); library(semPlot)
summary(bfi)
#usa l'uguale
bfi_reversed$gender = as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
summary(bfi_reversed)
#usa l'uguale
bfi_reversed$gender <- as.factor(bfi_reversed$gender) #costringo R a interpretare gender come fattore(categoriale)
summary(bfi_reversed)
x11();barplot(bfi_reversed[,1])
x11();barplot(table(bfi_reversed[,1])
x11();barplot(table(bfi_reversed[,1]))
barplot(table(bfi_reversed[,1]))
plot(table(bfi_reversed[,1]))
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5)
for(j in 1:25){
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi)[j])
}
?par
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi)[j])
}
plot(cars)
dev.off()
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi)[j])
}
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi)[j])
}
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
}
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
}
dev.off()
#automatizziamo la creazione dei 25 grafici
par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
}
#automatizziamo la creazione dei 25 grafici
x11();par(mfrow=c(5,5))
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
}
dev.off()
#automatizziamo la creazione dei 25 grafici
x11();par(mfrow=c(5,5)) #tabella 5x5 dove sistemo i grafici
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
}
#automatizziamo la creazione dei 25 grafici
x11();par(mfrow=c(5,5,1,1)) #tabella 5x5 dove sistemo i grafici
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
} #ci sono item che hanno praticamente risposto le stesse domande, questo significa che l'item di interesse è poco informativo in quanto non c'è differenza nel nostro campione testato
#automatizziamo la creazione dei 25 grafici
x11();par(mfrow=c(5,5,4,4)) #tabella 5x5 dove sistemo i grafici
for(j in 1:25){
barplot(table(bfi[,j]),main=colnames(bfi_reversed)[j])
} #ci sono item che hanno praticamente risposto le stesse domande, questo significa che l'item di interesse è poco informativo in quanto non c'è differenza nel nostro campione testato
#automatizziamo la creazione dei 25 grafici
x11();par(mfrow=c(5,5)) #tabella 5x5 dove sistemo i grafici
bfi_split <- split_dataset(data = bfi_reversed, prop = 0.5, seedx =121 ) #splitto il dataset in proporzione 0.5 nella prima parte, seedx è il seme per la generazione random
bfi_a <- bfi_split$A
bfi_b <- bfi_split$B
bfi_a_cor <- cor( bfi_a, method ='spearman') #spearman perchè c'è una categoriale
bfi_a_cor <- cor( bfi_a[1,25], method ='spearman') #spearman perchè sono categoriali
bfi_a_cor <- cor( bfi_a[,1:25], method ='spearman') #spearman perchè sono categoriali
corrplot(bfi_a_cor)
corrplot(corr =bfi_a_cor)
library(lavaan); library(semPlot); library(corrplot)
corrplot(corr =bfi_a_cor)
corrplot(corr =bfi_a_cor, method = ''circle)
corrplot(corr =bfi_a_cor, method = 'circle')
heatmap(bfi_a_cor)
heatmap(bfi_a_cor, symm= TRUE, hclustfun = hclust)
bfi_hclust = hclust( d= dist(bfi_a_cor), method = 'ward.D2')
plot(bfi_hclust)
heatmap(bfi_a_cor, symm= TRUE, hclustfun = hclust)
plot(bfi_hclust); reclust.hclust(tree = bfi_hclust, k=3)
plot(bfi_hclust); reclust.hclust(tree = bfi_hclust, k=3)
plot(bfi_hclust);
bfi_hclust = hclust( d= dist(bfi_a_cor), method = 'ward')
plot(bfi_hclust);
.D2
plot(bfi_hclust);
bfi_grps = cutree(tree = bfi_hclust, k = 3)
names(bfi_gps[bfi_grps==1])
names(bfi_grps[bfi_grps==1])
