last6S <- as.vector(last6S[(length(last6S)-5):length(last6S)], 'numeric')
mean(last6S)
tail(GF_av31_test_el_D[,'lastD'], n=1)
tail(GF_av31_test_el_S[,'lastS'], n=1)
View(GF_av31_test_el_S)
resultAcuity <- function(file) {
data <- read.csv(file, header = TRUE)[,c('SLOAN_letters','currentDScale','currentSScale','lastD','lastS','response',"seiUltimeD","seiUltimeS","side")]
data_D <- GF_av31_test_el[GF_av31_test_el$side=='D',]
data_S <- GF_av31_test_el[GF_av31_test_el$side=='S',]
data_D[,'response'] <- toupper(data_D[,'response'])
data_S[,'response'] <- toupper(data_S[,'response'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
last6D <- as.vector(last6D[(length(last6D)-5):length(last6D)], 'numeric')
mean(last6D)
direction = 1
for (i in 1:NROW(data_S)) {
if( data_S[i,'SLOAN_letters'] == data_S[i,'response'] & direction == -1){
direction = 1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
if( data_S[i,'SLOAN_letters'] != data_S[i,'response'] & direction == 1){
direction = -1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
}
last6S <- as.vector(last6S[(length(last6S)-5):length(last6S)], 'numeric')
m <- matrix(NA, nrow = 2, ncol = 2)
colnames(m) = c('lastValue','meanLast')
rownames(m) = c('D', 'S')
m[1,1] <- tail(data_D[,'lastD'], n=1)
m[2,1] <- tail(GF_av0_test_el_S[,'lastS'], n=1)
m[1,2] <- mean(last6D)
m[2,2] <- mean(last6S)
return(m)
}
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
GF_av0_test <- read.csv(file = '10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv', header = TRUE)
GF_av0_test_el <- GF_av0_test[,c('SLOAN_letters','currentDScale','currentSScale','lastD','lastS','response',"seiUltimeD","seiUltimeS","side")]
GF_av0_test_el_D <- GF_av0_test_el[GF_av0_test_el$side=='D',]
GF_av0_test_el_S <- GF_av0_test_el[GF_av0_test_el$side=='S',]
tail(GF_av0_test_el_D[,'lastD'], n=1)
tail(GF_av0_test_el_S[,'lastS'], n=1)
}
gc()
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
file = '10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv'
data <- read.csv(file, header = TRUE)[,c('SLOAN_letters','currentDScale','currentSScale','lastD','lastS','response',"seiUltimeD","seiUltimeS","side")]
data_D <- data[data$side=='D',]
data_S <- data[data$side=='S',]
data_D[,'response'] <- toupper(data_D[,'response'])
data_S[,'response'] <- toupper(data_S[,'response'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
plot(data_D[,'lastD'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
data_D[,'response'] <- toupper(data_D[,'response'])
data_S[,'response'] <- toupper(data_S[,'response'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
if(length(last6D)>6){
last6D <- as.vector(last6D[(length(last6D)-5):length(last6D)], 'numeric')
} else{
last6D <- as.vector(last6D, 'numeric')
}
direction = 1
for (i in 1:NROW(data_S)) {
if( data_S[i,'SLOAN_letters'] == data_S[i,'response'] & direction == -1){
direction = 1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
if( data_S[i,'SLOAN_letters'] != data_S[i,'response'] & direction == 1){
direction = -1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
}
if(length(last6S)>6){
last6S <- as.vector(last6S[(length(last6D)-5):length(last6S)], 'numeric')
} else{
last6S <- as.vector(last6S, 'numeric')
}
m <- matrix(NA, nrow = 2, ncol = 2)
colnames(m) = c('lastValue','meanLast')
rownames(m) = c('D', 'S')
m[1,1] <- tail(data_D[,'lastD'], n=1)
m[2,1] <- tail(GF_av0_test_el_S[,'lastS'], n=1)
m[1,2] <- mean(last6D)
m[2,2] <- mean(last6S)
m
m[2,1] <- tail(data_S[,'lastS'], n=1)
m[1,2] <- mean(last6D)
m[2,2] <- mean(last6S)
m
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV3_1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av31/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV31/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av1/av0/subject-11.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av31/av0/subject-11.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av31/av0/subject-11.csv')
file = '10-12-22/soggetti_esperimento_francesco/MV22/retest/av31/av0/subject-11.csv'
data <- read.csv(file, header = TRUE)[,c('SLOAN_letters','currentDScale','currentSScale','lastD','lastS','response',"seiUltimeD","seiUltimeS","side")]
data_D <- data[data$side=='D',]
data_S <- data[data$side=='S',]
data_D[,'response'] <- toupper(data_D[,'response'])
data_S[,'response'] <- toupper(data_S[,'response'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
if(length(last6D)>6){
last6D <- as.vector(last6D[(length(last6D)-5):length(last6D)], 'numeric')
} else{
last6D <- as.vector(last6D, 'numeric')
}
direction = 1
for (i in 1:NROW(data_S)) {
if( data_S[i,'SLOAN_letters'] == data_S[i,'response'] & direction == -1){
direction = 1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
if( data_S[i,'SLOAN_letters'] != data_S[i,'response'] & direction == 1){
direction = -1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
}
if(length(last6S)>6){
last6S <- as.vector(last6S[(length(last6D)-5):length(last6S)], 'numeric')
} else{
last6S <- as.vector(last6S, 'numeric')
}
m <- matrix(NA, nrow = 2, ncol = 2)
colnames(m) = c('lastValue','meanLast')
rownames(m) = c('D', 'S')
m[1,1] <- tail(data_D[,'lastD'], n=1)
m[2,1] <- tail(data_S[,'lastS'], n=1)
m[1,2] <- mean(last6D)
m[2,2] <- mean(last6S)
plot(data_D[,'lastD'])
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV3_1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av31/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV31/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av1/av0/subject-11.csv')
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV3_1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av31/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV31/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av1/av0/subject-11.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av31/av0/subject-11.csv')
resultAcuity()
source('Analisi dati R/funzioniAnalisi.R')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV3_1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/retest/av31/av0/subject-6.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV1/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/test/AV31/AV0/subject-4.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av1/av0/subject-11.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/MV22/retest/av31/av0/subject-11.csv')
resultAcuity()
resultAcuity()
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV1/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV31/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV1/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV31/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV1/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/test/AV31/AV0/subject-8.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/retest/av1/av0/subject-13.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/CP23/retest/av31/av0/subject-13.csv')
file = '10-12-22/soggetti_esperimento_francesco/CP23/retest/av31/av0/subject-13.csv'
data <- read.csv(file, header = TRUE)[,c('SLOAN_letters','currentDScale','currentSScale','lastD','lastS','response',"seiUltimeD","seiUltimeS","side")]
data_D <- data[data$side=='D',]
data_S <- data[data$side=='S',]
data_D[,'response'] <- toupper(data_D[,'response'])
data_S[,'response'] <- toupper(data_S[,'response'])
last6D <- list()
last6S <- list()
direction = 1
for (i in 1:NROW(data_D)) {
if( data_D[i,'SLOAN_letters'] == data_D[i,'response'] & direction == -1){
direction = 1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
if( data_D[i,'SLOAN_letters'] != data_D[i,'response'] & direction == 1){
direction = -1
last6D[length(last6D)+1] <- data_D[i,'lastD']
}
}
if(length(last6D)>6){
last6D <- as.vector(last6D[(length(last6D)-5):length(last6D)], 'numeric')
} else{
last6D <- as.vector(last6D, 'numeric')
}
direction = 1
for (i in 1:NROW(data_S)) {
if( data_S[i,'SLOAN_letters'] == data_S[i,'response'] & direction == -1){
direction = 1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
if( data_S[i,'SLOAN_letters'] != data_S[i,'response'] & direction == 1){
direction = -1
last6S[length(last6S)+1] <- data_S[i,'lastS']
}
}
if(length(last6S)>6){
last6S <- as.vector(last6S[(length(last6S)-5):length(last6S)], 'numeric')
} else{
last6S <- as.vector(last6S, 'numeric')
}
plot(data_S[,'lastS'])
plot(data_D[,'lastD'])
plot(data_S[,'lastS'])
plot(data_D[,'lastD'])
plot(data_S[,'lastS'])
resultAcuity('10-12-22/soggetti_esperimento_francesco/BT20/test/av/AV0/subject-5.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/BT20/test/AV31/AV0/subject-5.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/BT20/retest/av14/av0/subject-9.csv')
resultAcuity('10-12-22/soggetti_esperimento_francesco/BT20/retest/av31/av0/subject-9.csv')
library(lavaan)
library(psych)
load('Datasets-20221124/ISI.Rdata')
setwd("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing/EserciziTestingCalcagni-")
library(lavaan)
library(psych)
load('Datasets-20221124/ISI.Rdata')
source('Utilities-20221124/kfold_crossvalidation.R')
source('Utilities-20221124/plot_lavaan_model.R')
library(semPlot)
#modelli bifactor, c'èm una latente che è legata a tutte le osservate ma non correla nessun'altra latente.
#Solitamente questa si chiama grouping factor come procedura
head(Y)
str(Y)
summary(Y)
#per standardizzare i dati (ora sono già standardizzati)
Y = scale(Y, center = TRUE, scale = FALSE) # per cfa i dati devono essere centrati
mod1 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference \n'
mo1_fit <- cfa(model = mod1, data = Y)
plot_lavaan_model(fitted_model = mo1_fit, what='std.all')
resultAcuity('10-12-22/soggetti_esperimento_francesco/GF21/test/AV0/subject-4.csv')
library(lavaan)
library(psych)
load('Datasets-20221124/ISI.Rdata')
source('Utilities-20221124/kfold_crossvalidation.R')
source('Utilities-20221124/plot_lavaan_model.R')
library(semPlot)
#modelli bifactor, c'èm una latente che è legata a tutte le osservate ma non correla nessun'altra latente.
#Solitamente questa si chiama grouping factor come procedura
head(Y)
str(Y)
summary(Y)
#per standardizzare i dati (ora sono già standardizzati)
Y = scale(Y, center = TRUE, scale = FALSE) # per cfa i dati devono essere centrati
#cfa -> analisi della dimensionalità -> per studiare quante cose quel test sta misurando (quanti misurandi sta cogliendo il test)
#ISI: 2 misurandi -> difficoltà di addormentarsi
#                 -> distress da deprivazione di sonno
mod1 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference \n'
# con il secondo eta stanno dicendo che l'insonnia non è legata solo all'insonnia ma anche a fattori di "personalità"
mo1_fit <- cfa(model = mod1, data = Y)
plot_lavaan_model(fitted_model = mo1_fit, what='std.all')
#modello 2 m
# i problemi di convergenza possono essere o segnalati da lavaan (standard error non calcolati)
#potrebbero pure non essere segnalati (std err molto elevau 20 in su circa)
sono essere o segnalati da lavaan (standard error non calcolati)
# i problemi di convergenza possono essere o segnalati da lavaan (standard error non calcolati)
#potrebbero pure non essere segnalati (std err molto elevau 20 in su circa)
# o si cambiano i dati o si cambia il modello
mod2 = "diff =~ wakeup_early + staying_asleep + falling_asleep\n
distress =~ worried + noticeable + inference \n
dissatisfaction =~ satisfied + worried + wakeup_early"
mod2_fit = cfa(model = mod2, data=Y)
plot_lavaan_model(fitted_model = mod2_fit, what = "std.all")
#The Insomnia Severity Index (ISI) is one of the most well-known instruments for assessing insomnia.
#It contains seven items, all scored on a five-point scale, to measure the symptoms of insomnia.
load("laboratorio/data/ISI.Rdata")
head(Y)
Y = psych::rescale(x = Y,mean = 0,sd = 1) #standardizziamo i dati iniziali
# Two-factor model:
## Cit. Sierra, J. C., Guillén-Serrano, V., & Santos-Iglesias, P. (2008). Insomnia Severity Index: some indicators about its reliability and validity on an older adults sample. Revista de neurologia, 47(11), 566-570.
# The first factor included items assessing severity of sleeping difficulties. The items covered difficulties in initiating and maintaining sleep, as well as satisfaction with current sleeping pattern.
# The second factor focused more on the impact of insomnia, and included items assessing day time interference and distress associated with insomnia, as well as how noticeable the sleeping problem was.
isi.twof = "
sleep_diff =~ wakeup_early+staying_asleep+falling_asleep+satisfied
impact =~ worried+noticeable+inference
"
isi.twof_fit = cfa(model = isi.twof,data = Y)
summary(isi.twof_fit,standardize=TRUE)
x11(); semPaths(object = isi.twof_fit,what="model",whatLabels = "std.all",style="lisrel",nCharNodes = 3,edge.label.cex = 1.25,sizeMan=5,sizeLat = 6,nDigits = 2,title = TRUE)
load('Datasets-20221124/ISI.Rdata')
load('Datasets-20221124/ISI.Rdata')
source('Utilities-20221124/kfold_crossvalidation.R')
source('Utilities-20221124/plot_lavaan_model.R')
library(semPlot)
head(Y)
str(Y)
summary(Y)
#per standardizzare i dati (ora sono già standardizzati)
Y = scale(Y, center = TRUE, scale = FALSE) # per cfa i dati devono essere centrati
mod1 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference \n'
mo1_fit <- cfa(model = mod1, data = Y)
plot_lavaan_model(fitted_model = mo1_fit, what='std.all')
mod2 = "diff =~ wakeup_early + staying_asleep + falling_asleep\n
distress =~ worried + noticeable + inference \n
dissatisfaction =~ satisfied + worried + wakeup_early"
mod2_fit = cfa(model = mod2, data=Y)
plot_lavaan_model(fitted_model = mod2_fit, what = "std.all")
# (A) Dati ----------------------------------------------------------------
## Source: Chen, P. Y., Yang, C. M., & Morin, C. M. (2015). Validating the cross-cultural factor structure and invariance property of the Insomnia Severity Index: evidence based on ordinal EFA and CFA. Sleep medicine, 16(5), 598-603.
#The Insomnia Severity Index (ISI) is one of the most well-known instruments for assessing insomnia.
#It contains seven items, all scored on a five-point scale, to measure the symptoms of insomnia.
load("laboratorio/data/ISI.Rdata")
head(Y)
Y = psych::rescale(x = Y,mean = 0,sd = 1) #standardizziamo i dati iniziali
# Two-factor model:
## Cit. Sierra, J. C., Guillén-Serrano, V., & Santos-Iglesias, P. (2008). Insomnia Severity Index: some indicators about its reliability and validity on an older adults sample. Revista de neurologia, 47(11), 566-570.
# The first factor included items assessing severity of sleeping difficulties. The items covered difficulties in initiating and maintaining sleep, as well as satisfaction with current sleeping pattern.
# The second factor focused more on the impact of insomnia, and included items assessing day time interference and distress associated with insomnia, as well as how noticeable the sleeping problem was.
isi.twof = "
sleep_diff =~ wakeup_early+staying_asleep+falling_asleep+satisfied
impact =~ worried+noticeable+inference
"
isi.twof_fit = cfa(model = isi.twof,data = Y)
summary(isi.twof_fit,standardize=TRUE)
x11(); semPaths(object = isi.twof_fit,what="model",whatLabels = "std.all",style="lisrel",nCharNodes = 3,edge.label.cex = 1.25,sizeMan=5,sizeLat = 6,nDigits = 2,title = TRUE)
# Three-factor model:
## Fernandez-Mendoza, J., Rodriguez-Muñoz, A., Vela-Bueno, A., Olavarrieta-Bernardino, S., Calhoun, S. L., Bixler, E. O., & Vgontzas, A. N. (2012). The Spanish version of the Insomnia Severity Index: a confirmatory factor analysis. Sleep medicine, 13(2), 207-210.
#The first factor was termed the impact component and defined by items referring to distress, interference, and noticeability of insomnia.
#The second factor was named the severity component, as it contained three items describing the primary symptoms of insomnia at different time points of the night (initial, middle, and terminal).
#The third factor was called the (dis)satisfaction component and was defined by a single item about overall satisfaction with sleep.
#According to Bastien et al., these three factors captured the main diagnostic criteria for insomnia.
isi.threef = "
sleep_diff =~ wakeup_early+staying_asleep+falling_asleep
dissatisf =~ satisfied+worried+wakeup_early
impact =~ worried+noticeable+inference
"
isi.threef_fit = cfa(model = isi.threef,data = Y)
summary(isi.threef_fit,standardize=TRUE)
x11(); semPaths(object = isi.threef_fit,what="model",whatLabels = "std.all",style="lisrel",nCharNodes = 3,edge.label.cex = 1.25,sizeMan=5,sizeLat = 6,nDigits = 2)
x11(); semPaths(object = isi.twof_fit,what="model",whatLabels = "std.all",style="lisrel",nCharNodes = 3,edge.label.cex = 1.25,sizeMan=5,sizeLat = 6,nDigits = 2,title = TRUE)
mod3 = "sleep_diff =~ wakeup_early+staying_asleep+falling_asleep
dissatisf =~ satisfied+worried+wakeup_early
impact =~ worried+noticeable+inference
eta =~ sleep_diff+dissatisf+impact"
mod3_fit = cfa(model = mod3,data = Y)
summary(isi.so_fit,standardize=TRUE)
summary(mod3_fit,standardize=TRUE)
fitmeasures(object = mod3_fit,fit.measures = c("chisq","df","pvalue","RMSEA","CFI"))
plot_lavaan_model(fitted_model = mod3_fit, what = "std.all")
plot_lavaan_model(fitted_model = mod2_fit, what = "std.all")
plot_lavaan_model(fitted_model = mo1_fit, what='std.all')
mod3 = "sleep_diff =~ wakeup_early+staying_asleep+falling_asleep
dissatisf =~ satisfied+worried+wakeup_early
impact =~ worried+noticeable+inference
eta =~ sleep_diff+dissatisf+impact"
source('Utilities-20221124/lavaan_checkConvergence.R')
install.packages("matrixcalc")
kf1 = kFold_validation(mod1, Y, nfold = 5, dwls = FALSE, error = 'zago')
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 5, dwls = FALSE, error = 'montecarlo') #error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errore per ciascun fold
View(kFold_validation)
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 5, error = 'montecarlo', B = 100) #error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errori (B) per ciascun fold
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 5, error = 'montecarlo', B = 100, force_crossValid = TRUE) #error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errori (B) per ciascun fold
source('Utilities-20221124/kfold_crossvalidation.R')
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 5, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 5, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 5, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf1
kf2
kf3
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
boxplot(kf1,kf2,kf3)
kf1
kf1
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
#error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errori (B) per ciascun fold
#force cross validation ignora i problemi di convergenza
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
boxplot(kf1,kf2,kf3)
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 10, dwls = FALSE, error = 'zago', B = 100, force_crossValid = TRUE)
#error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errori (B) per ciascun fold
#force cross validation ignora i problemi di convergenza
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 10, dwls = FALSE, error = 'zago', B = 100, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 10, dwls = FALSE, error = 'zago', B = 100, force_crossValid = TRUE)
boxplot(kf1,kf2,kf3)
boxplot(kf1,kf2,kf3)
boxplot(kf1,kf2,kf3)
mod4 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference
csi =~ wakeup_early + staying_asleep + falling_asleep + satisfied + worried + noticeable + inference \n
csi ~~ 0*diff \n
csi ~~ 0*disstress \n'
mod4 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference
csi =~ wakeup_early + staying_asleep + falling_asleep + satisfied + worried + noticeable + inference \n
csi ~~ 0*diff \n
csi ~~ 0*disstress \n'
mod4_fit <- cfa(model = mod1, data = Y)
plot_lavaan_model(fitted_model = modd4_fit, what='std.all')
mod4 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference
csi =~ wakeup_early + staying_asleep + falling_asleep + satisfied + worried + noticeable + inference \n
csi ~~ 0*diff \n
csi ~~ 0*disstress \n'
mod4_fit <- cfa(model = mod4, data = Y)
mod4 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference
csi =~ wakeup_early + staying_asleep + falling_asleep + satisfied + worried + noticeable + inference \n
csi ~~ 0*diff \n
csi ~~ 0*distress \n'
mod4_fit <- cfa(model = mod4, data = Y)
plot_lavaan_model(fitted_model = mod4_fit, what='std.all')
fitmeasures(object = mod4_fit,fit.measures = c("chisq","df","pvalue","RMSEA","CFI")) #modello non converge
summary(object = mod4_fit, standardized = TRUE)
#si interpreti estensivamente -> perchè è buono? in che senso? cosa vuol dire? giustificare le motivazioni
kf4 = kFold_validation(model_definition =  mod4, data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
boxplot(kf1,kf2,kf3,kf4)
boxplot(kf1,kf2,kf3)
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 100, force_crossValid = TRUE)
fitmeasures(object = mod1_fit, fit.measures = c("chisq","df","pvalue","RMSEA","CFI")) #modello non converge
mod1 <- ' diff =~ wakeup_early + staying_asleep + falling_asleep + satisfied \n
distress =~ worried + noticeable + inference \n'
# con il secondo eta stanno dicendo che l'insonnia non è legata solo all'insonnia ma anche a fattori di "personalità"
mod1_fit <- cfa(model = mod1, data = Y)
plot_lavaan_model(fitted_model = mo1_fit, what='std.all')
fitmeasures(object = mod4_fit, fit.measures = c("chisq","df","pvalue","RMSEA","CFI")) #modello non converge
fitmeasures(object = mod1_fit, fit.measures = c("chisq","df","pvalue","RMSEA","CFI")) #modello non converge
boxplot(kf1,kf2,kf3,kf4)
fitmeasures(object = mod1_fit, fit.measures = c("chisq","df","pvalue","RMSEA","CFI",'aic')) #modello non converge
fitmeasures(object = mod4_fit, fit.measures = c("chisq","df","pvalue","RMSEA","CFI",'aic')) #modello non converge
kf1 = kFold_validation(model_definition =  mod1,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 1000, force_crossValid = TRUE)
#error: zago errore viene calcolato un'unica volta, montecarlo la procedura è simulativae avremo tanti errori (B) per ciascun fold
#force cross validation ignora i problemi di convergenza
kf2 = kFold_validation(model_definition =  mod2,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 1000, force_crossValid = TRUE)
kf3 = kFold_validation(model_definition =  mod3,data =  Y, nfold = 10, dwls = FALSE, error = 'montecarlo', B = 1000, force_crossValid = TRUE)
boxplot(kf1,kf2,kf3)
