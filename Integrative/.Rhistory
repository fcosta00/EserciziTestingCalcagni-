geom_path(data=pazpreSD, aes(x=visStop, y=y, group=1), colour='darkslategrey') + geom_point(data=pazpreSD, aes(x=visStop, y=y, group=1), size=1, colour='darkslategrey') +
geom_path(data=pazpreDS, aes(x=visStart, y=y, group=2), col='darkred') + geom_point(data=pazpreDS, aes(x=visStart, y=y, group=2), col='darkred', size=1) +
geom_path(data=pazpreDS, aes(x=visStop, y=y, group=2), col='darkred') + geom_point(data=pazpreDS, aes(x=visStop, y=y, group=2), col='darkred', size=1)
pazpreAvg <- data.frame( y= pazpreDS$y, visStart = (pazpreSD$visStart + pazpreDS$visStop)/2, visStop = (pazpreDS$visStart + pazpreSD$visStop)/2)
ggplot() +  geom_path(data=pazpreAvg, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpreAvg, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpreAvg, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpreAvg, aes(x=visStop, y=y, group=1), size=0.8)
pazpost <- read.csv(fileName2)
str(pazpost)
summary(pazpost)
names(pazpost)
pazpost$y <- pazpost$y*-1
pazpost <- pazpost[order(pazpost$y),]
pazpost <- pazpost[!duplicated(pazpost$track_id),]
pazpostSD <- pazpost[pazpost$tracciato == 'S-D',]
pazpostDS <- pazpost[pazpost$tracciato == 'D-S',]
ggplot() +  geom_path(data=pazpostSD, aes(x=visStart, y=y, group=1), colour='darkslategrey') + geom_point(data=pazpostSD, aes(x=visStart, y=y, group=1), size=1, colour='darkslategrey') +
geom_path(data=pazpostSD, aes(x=visStop, y=y, group=1), colour='darkslategrey') + geom_point(data=pazpostSD, aes(x=visStop, y=y, group=1), size=1, colour='darkslategrey') +
geom_path(data=pazDS, aes(x=visStart, y=y, group=2), col='darkred') + geom_point(data=pazDS, aes(x=visStart, y=y, group=2), col='darkred', size=1) +
geom_path(data=pazDS, aes(x=visStop, y=y, group=2), col='darkred') + geom_point(data=pazDS, aes(x=visStop, y=y, group=2), col='darkred', size=1)
pazpostAvg <- data.frame( y= pazDS$y, visStart = (pazpostSD$visStart + pazDS$visStop)/2, visStop = (pazDS$visStart + pazpostSD$visStop)/2)
ggplot() +  geom_path(data=pazpostAvg, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpostAvg, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpostAvg, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpostAvg, aes(x=visStop, y=y, group=1), size=0.8)
library(ggplot2)
pazDelta <- ggplot() +  geom_path(data=pazpreAvg, aes(x=visStart, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvg, aes(x=visStart, y=y, group=1), size=1.2, colour='darkred') +
geom_path(data=pazpreAvg, aes(x=visStop, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvg, aes(x=visStop, y=y, group=1), size=1.2, colour='darkred')  +
geom_path(data=pazpostAvg, aes(x=visStart, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvg, aes(x=visStart, y=y, group=1), size=1.2, colour='darkgreen') +
geom_path(data=pazpostAvg, aes(x=visStop, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvg, aes(x=visStop, y=y, group=1), size=1.2, colour='darkgreen')  +
geom_text(aes(x=0, y=0),label='+', size=6, colour='red') +
scale_y_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-520, 520, by = 80))  +
scale_x_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-960, 960, by = 120), limits = c(-960, 960)) +
geom_vline(xintercept = -960, color = "blue", size=1) +
geom_vline(xintercept = 960, color = "blue", size=1) +
theme_minimal()
pazDelta
gc()
pazpreAvgNoOut <- data.frame( y= pazpreDSnoOut$y, visStart = (pazpreSDnoOut$visStart + pazpreDSnoOut$visStop)/2, visStop = (pazpreDSnoOut$visStart + pazpreSDnoOut$visStop)/2)
pazpreAvgNoOut$y
ggplot() +  geom_path(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
pazpreAvgNoOut <- data.frame( y= pazpreDSnoOut$y, visStart = (pazpreSDnoOut$visStart + pazpreDSnoOut$visStop)/2, visStop = (pazpreDSnoOut$visStart + pazpreSDnoOut$visStop)/2)
pazpreAvgNoOut$y
ggplot() +  geom_path(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
plotpreAvgNoOut <- ggplot() +  geom_path(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
plotpreAvgNoOut
pazDelta <- ggplot() +  geom_path(data=pazpreAvg, aes(x=visStart, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvg, aes(x=visStart, y=y, group=1), size=1.2, colour='darkred') +
geom_path(data=pazpreAvg, aes(x=visStop, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvg, aes(x=visStop, y=y, group=1), size=1.2, colour='darkred')  +
geom_path(data=pazpostAvg, aes(x=visStart, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvg, aes(x=visStart, y=y, group=1), size=1.2, colour='darkgreen') +
geom_path(data=pazpostAvg, aes(x=visStop, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvg, aes(x=visStop, y=y, group=1), size=1.2, colour='darkgreen')  +
geom_text(aes(x=0, y=0),label='+', size=6, colour='red') +
scale_y_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-520, 520, by = 80))  +
scale_x_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-960, 960, by = 120), limits = c(-960, 960)) +
geom_vline(xintercept = -960, color = "blue", size=1) +
geom_vline(xintercept = 960, color = "blue", size=1) +
theme_minimal()
pazDelta
pazQ1 <- pazpostDS[pazpostDS$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpreDS[pazpreDS$y <= 0,]
pazQ3$y
pazpreDS$y
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpostDSnoOut <- rbind(pazQ3, pazQ1)
pazpostDSnoOut$y
pazQ1 <- pazpostSD[pazpostSD$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpostSD[pazpostSD$y <= 0,]
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpostSDnoOut <- rbind(pazQ3, pazQ1)
pazpostAvgNoOut <- data.frame( y= pazpostDSnoOut$y, visStart = (pazpostSDnoOut$visStart + pazpostDSnoOut$visStop)/2, visStop = (pazpostDSnoOut$visStart + pazpostSDnoOut$visStop)/2)
pazpostAvgNoOut$y
plotpostAvgNoOut <- ggplot() +  geom_path(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
plotpostAvgNoOut
pazQ1 <- pazpostDS[pazpostDS$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpostDS[pazpostDS$y <= 0,]
pazQ3$y
pazpostDS$y
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpostDSnoOut <- rbind(pazQ3, pazQ1)
pazpostDSnoOut$y
pazQ1 <- pazpostSD[pazpostSD$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpostSD[pazpostSD$y <= 0,]
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpostSDnoOut <- rbind(pazQ3, pazQ1)
pazpostAvgNoOut <- data.frame( y= pazpostDSnoOut$y, visStart = (pazpostSDnoOut$visStart + pazpostDSnoOut$visStop)/2, visStop = (pazpostDSnoOut$visStart + pazpostSDnoOut$visStop)/2)
pazpostAvgNoOut$y
plotpostAvgNoOut <- ggplot() +  geom_path(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
plotpostAvgNoOut
summary(pazProcessed)
pazQ1 <- pazpreDS[pazpreDS$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpreDS[pazpreDS$y <= 0,]
pazQ3$y
pazpreDS$y
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpreDSnoOut <- rbind(pazQ3, pazQ1)
pazpreDSnoOut$y
pazQ1 <- pazpreSD[pazpreSD$y>0,]
meanQ <- mean(pazQ1$visStop)
sdQ <- sd(pazQ1$visStop)
pazQ1$visStop <- replace(pazQ1$visStop, pazQ1$visStop > (meanQ + (sdQ*2.5)) | pazQ1$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ1$visStart)
sdQ <- sd(pazQ1$visStart)
pazQ1$visStart <- replace(pazQ1$visStart, pazQ1$visStart > (meanQ + (sdQ*2.5)) | pazQ1$visStart < (meanQ - (sdQ*2.5)), meanQ)
pazQ3 <- pazpreSD[pazpreSD$y <= 0,]
meanQ <- mean(pazQ3$visStop)
sdQ <- sd(pazQ3$visStop)
pazQ3$visStop <- replace(pazQ3$visStop, pazQ3$visStop > (meanQ + (sdQ*2.5)) | pazQ3$visStop < (meanQ - (sdQ*2.5)), meanQ)
meanQ <- mean(pazQ3$visStart)
sdQ <- sd(pazQ3$visStart)
pazpreSDnoOut <- rbind(pazQ3, pazQ1)
pazpreAvgNoOut <- data.frame( y= pazpreDSnoOut$y, visStart = (pazpreSDnoOut$visStart + pazpreDSnoOut$visStop)/2, visStop = (pazpreDSnoOut$visStart + pazpreSDnoOut$visStop)/2)
pazpreAvgNoOut$y
plotpreAvgNoOut <- ggplot() +  geom_path(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1), size=0.8)
plotpreAvgNoOut
summary(pazProcessed)
pazDelta <- ggplot() +  geom_path(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvgNoOut, aes(x=visStart, y=y, group=1), size=1.2, colour='darkred') +
geom_path(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1.2), colour='darkred') + geom_point(data=pazpreAvgNoOut, aes(x=visStop, y=y, group=1), size=1.2, colour='darkred')  +
geom_path(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvgNoOut, aes(x=visStart, y=y, group=1), size=1.2, colour='darkgreen') +
geom_path(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1.2), colour='darkgreen') + geom_point(data=pazpostAvgNoOut, aes(x=visStop, y=y, group=1), size=1.2, colour='darkgreen')  +
geom_text(aes(x=0, y=0),label='+', size=6, colour='red') +
scale_y_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-520, 520, by = 80))  +
scale_x_continuous(minor_breaks = seq(-960, 960, 40), breaks = seq(-960, 960, by = 120), limits = c(-960, 960)) +
geom_vline(xintercept = -960, color = "blue", size=1) +
geom_vline(xintercept = 960, color = "blue", size=1) +
theme_minimal()
pazDelta
plotpostAvgNoOut
ggplot() +  geom_path(data=pazpostAvg, aes(x=visStart, y=y, group=1)) + geom_point(data=pazpostAvg, aes(x=visStart, y=y, group=1), size=0.8) +
geom_path(data=pazpostAvg, aes(x=visStop, y=y, group=1)) + geom_point(data=pazpostAvg, aes(x=visStop, y=y, group=1), size=0.8)
set.seed(123)
campione = rnorm(100)
t.test(campioone)
t.test(campione)
testEsempio = t.test(campione)
curve(dt(x, df=testEsempio$parameter), )
View(testEsempio)
curve(dt(x, df=testEsempio$parameter), from = -4, to = 4)
curve(dt(x, df=testEsempio$parameter), from = -4, to = 4, yla= t)
curve(dt(x, df=testEsempio$parameter), from = -4, to = 4, yla= 't')
abline(v= testEsempio$statistic, lty = 'dashed')
?dt
abline(v= testEsempio$statistic, lty = 'dashed', col="unicorn")
abline(v= testEsempio$statistic, lty = 'dashed', col="cacca")
abline(v= testEsempio$statistic, lty = 'dashed', col="poo")
abline(v= testEsempio$statistic, lty = 'dashed', col="pee")
install.packages("corrplot")
install.packages("corrplot")
plot(mpg ~ hp, data = mtcars)
mtcars_reg <- lm(mpg ~ hp, data = mtcars)
summary(mtcars_reg)
par(mfrow = c(3,1), mar = c(2,2,1,1)) #tre grafici in fila
{
# Retta di regressione
plot(mpg ~ hp, data = mtcars)
abline(mtcars_reg$coefficients, col = "red")
# Pattern nei residui
plot(mtcars_reg$residuals, main = "Residui")
# Distribuzione in quantili
qqnorm(mtcars_reg$residuals)
qqline(mtcars_reg$residuals)
plot(mtcars_reg, which = 1)
} #metodi verificare bontà modello
#prova regressione curva
mtcars_reg2 <- lm(mpg ~ hp + I(hp^2), data = mtcars)
summary(mtcars_reg2)
plot(mtcars_reg2, which = 1)
x = seq(min(mtcars$hp),
max(mtcars$hp),
length = 1000)
yhat = predict(mtcars_reg2, newdata = data.frame('hp'= x))
plot(mpg ~ hp, data = mtcars)
lines(x, yhat, col=2)
#es1
summary(mtcars)
plot(mpg ~ wt, data = mtcars)
mpgwt_reg <- lm(mpg  ~ wt, data = mtcars)
summary(mpgwt_reg)
plot(mpg  ~ wt, data = mtcars)
abline(mpgwt_reg$coefficients, col = "red")
plot(mpgwt_reg, which=1)
mpgwt_reg2 <- lm(mpg  ~ wt + I(wt^2), data = mtcars)
summary(mpgwt_reg2)
plot(mpgwt_reg2, which=1)
x = seq(min(mtcars$wt),
max(mtcars$wt),
length = 1000)
yhat = predict(mpgwt_reg2, newdata = data.frame('wt'= x))
plot(mpg ~ wt, data = mtcars)
lines(x, yhat, col=2)
#es regrex multipla
multi_reg <- lm(mpg  ~ wt + hp, data = mtcars)
summary(multi_reg)
#prova reg multipla sensata
multi_reg_pro <- lm(mpg  ~ ., data = mtcars)
multi_reg_pro <- lm(mpg  ~ wt * am * hp, data = mtcars)
summary(multi_reg_pro)
plot(mpg  ~ am, data= mtcars )
multi_reg <- lm(mpg  ~ wt + am + hp, data = mtcars)
summary(multi_reg)
} # https://thefreolo.github.io/book/regressione.html#regressione-multipla
# Esercizi e prove personali non presenti a lezione
{
plot(mpg ~ hp, data = mtcars)
mtcars_reg <- lm(mpg ~ hp, data = mtcars)
summary(mtcars_reg)
par(mfrow = c(3,1), mar = c(2,2,1,1)) #tre grafici in fila
{
# Retta di regressione
plot(mpg ~ hp, data = mtcars)
abline(mtcars_reg$coefficients, col = "red")
# Pattern nei residui
plot(mtcars_reg$residuals, main = "Residui")
# Distribuzione in quantili
qqnorm(mtcars_reg$residuals)
qqline(mtcars_reg$residuals)
plot(mtcars_reg, which = 1)
} #metodi verificare bontà modello
#prova regressione curva
mtcars_reg2 <- lm(mpg ~ hp + I(hp^2), data = mtcars)
summary(mtcars_reg2)
plot(mtcars_reg2, which = 1)
x = seq(min(mtcars$hp),
max(mtcars$hp),
length = 1000)
yhat = predict(mtcars_reg2, newdata = data.frame('hp'= x))
plot(mpg ~ hp, data = mtcars)
lines(x, yhat, col=2)
#es1
summary(mtcars)
plot(mpg ~ wt, data = mtcars)
mpgwt_reg <- lm(mpg  ~ wt, data = mtcars)
summary(mpgwt_reg)
plot(mpg  ~ wt, data = mtcars)
abline(mpgwt_reg$coefficients, col = "red")
plot(mpgwt_reg, which=1)
mpgwt_reg2 <- lm(mpg  ~ wt + I(wt^2), data = mtcars)
summary(mpgwt_reg2)
plot(mpgwt_reg2, which=1)
x = seq(min(mtcars$wt),
max(mtcars$wt),
length = 1000)
yhat = predict(mpgwt_reg2, newdata = data.frame('wt'= x))
plot(mpg ~ wt, data = mtcars)
lines(x, yhat, col=2)
#es regrex multipla
multi_reg <- lm(mpg  ~ wt + hp, data = mtcars)
summary(multi_reg)
#prova reg multipla sensata
multi_reg_pro <- lm(mpg  ~ ., data = mtcars)
multi_reg_pro <- lm(mpg  ~ wt * am * hp, data = mtcars)
summary(multi_reg_pro)
plot(mpg  ~ am, data= mtcars )
multi_reg <- lm(mpg  ~ wt + am + hp, data = mtcars)
summary(multi_reg)
} # https://thefreolo.github.io/book/regressione.html#regressione-multipla
# E S E R C I Z I O   1
{
summary(iris)
#stesso identi grafici, x(ascisse) -> Sepal.Length, y(ordinate) -> Petal.Width,
plot( iris$Sepal.Length, iris$Petal.Width )
plot( Petal.Width ~ Sepal.Length , data = iris)
#coloro il grafico in base alla specie
plot( iris$Sepal.Length, iris$Petal.Width, col = iris$Species )
plot( iris$Sepal.Length, iris$Petal.Width, pch = 20, col = c('red', 'blue', 'green')[iris$Species])
#la specie sembra essere indicativa in quanto nei due cluster le specie non sono mescolate ma son ben divise (nel cluster 1 è presente solo una specie)
# Modello senza Species
modNoSpecies = lm(Petal.Width ~ Sepal.Length, data=iris)
summary(modNoSpecies)
# Modello con Species
modNoInt = lm(Petal.Width ~ Sepal.Length + Species, data=iris)
summary(modNoInt)
# Modello con interazione Sepal.Length e Species (equivalente a dire Sepal.Length*Species, coefficiente angolare specifico)
modInt = lm(Petal.Width ~ Sepal.Length + Species + Sepal.Length:Species, data=iris)
summary(modInt)
library(sjPlot)
plot_model(modNoSpecies, type="pred", terms=c("Sepal.Length"), ci.lvl = NA)
plot_model(modNoInt, type="pred", terms=c("Sepal.Length", "Species"), ci.lvl = NA)
plot_model(modInt, type="pred", terms=c("Sepal.Length", "Species"), ci.lvl = NA)
#controllo se il modello di interazione è significativo rispetto a quello senza interazione
anova(modNoInt, modInt)
#valore del test F molto alto, accetto per cui l'ipotesi H0, il modello con interazione non è significativamente differente
anova(modInt) #test che mostra la devianza dovuta a ogni regressore inserito
}
# E S E R C I Z I O   2
{
library(MASS)
#funzioni per capire la struttura del database che stiamo analizzando
summary(anorexia)
head(anorexia)
#converto il peso da libbre a kg
anorexia$Prewt <- anorexia$Prewt*0.4535
anorexia$Postwt <- anorexia$Postwt*0.4535
#grafico per il confronto delle terapie pre e post
boxplot(anorexia$Prewt[anorexia$Treat == 'Cont'], anorexia$Postwt[anorexia$Treat == 'Cont'],
anorexia$Prewt[anorexia$Treat == 'CBT'], anorexia$Postwt[anorexia$Treat == 'CBT'],
anorexia$Prewt[anorexia$Treat == 'FT'], anorexia$Postwt[anorexia$Treat == 'FT'],
names = c("Cont Pre","Cont Post","CBT Pre", 'CBT Post', 'FT Pre', 'FT Post'),
col = c('cyan4', 'cyan3', 'coral4', 'coral3', 'darkolivegreen4', 'darkolivegreen3'),
ylab = 'Weigth')
#grafico per il confronto delle terapie con delta post pre
boxplot(Postwt-Prewt ~ Treat, data = anorexia,
col = c('coral3', 'cyan3', 'darkolivegreen3'),
ylab = 'Weigth')
mod_interazione <- lm(Postwt ~ Prewt, data = anorexia[anorexia$Treat == 'FT',])
plot(Postwt ~ Prewt, data = anorexia[anorexia$Treat == 'FT',])
anorexiere = anorexia
anorexia$Treat = relevel(anorexia$Treat, ref = "Cont")
mod = lm(Postwt-Prewt ~ 0 + Treat, data = anorexia)
mod = lm(Postwt-Prewt ~ Treat, data = anorexia)
summary(mod)
anorexiere$Treat <- relevel(anorexiere$Treat, "Cont")
mod <- lm(Postwt ~ Prewt + Treat + Prewt:Treat, data = anorexiere)
plot_model(mod, type="pred", terms=c("Prewt", "Treat"))
modCont <- lm(Postwt-Prewt ~ Prewt + Treat + Prewt:Treat, data = anorexia)
mod <- lm(Postwt-Prewt ~ Treat, data = anorexia)
modCont <- lm(Postwt-Prewt ~ Treat, data = anorexia[anorexia$Treat == 'Cont',])
summary(mod)
plot( iris$Sepal.Length, iris$Petal.Width )
plot( Postwt-Prewt ~ Treat , data = anorexia)
plot_model(mod, type="pred", terms=c("Treat"), ci.lvl = NA)
anova(modCont)
boxplot(Postwt-Prewt ~ Treat, data = anorexia)
}
library('corrplot')
install.packages("qgraph")
install.packages("clusterGeneration")
install.packages("psych")
install.packages("mvtnorm")
install.packages("lavaan")
install.packages("corrplot")
install.packages("ggraph")
install.packages("clusterGeneration")
install.packages("psych")
install.packages("mvtnorm")
install.packages("lavaan")
install.packages("corrplot")
install.packages("ggraph")
install.packages("dendextend")
install.packages("semPlot")
install.packages("semTools")
install.packages("ltm")
install.packages("PerFit")
install.packages("aspect")
install.packages("lavaanPlot")
library(lavaan)
data('HolzingerSwineford19369')
data('HolzingerSwineford1939')
summary('HolzingerSwineford1939')
force(HolzingerSwineford1939)
summary('HolzingerSwineford1939')
summary("HolzingerSwineford1939")
summary(HolzingerSwineford1939)
str(HolzingerSwineford1939)
#  =~ simbolo lavaan che indica legame tra latente e osservate
#  +  indica la concatenazione, non la somma
mod_visual <- " percezione =~ x1 + x2 + x3 "
mod_visual_fit <- cfa(model = model_visual, data = HolzingerSwineford1939)
#  =~ simbolo lavaan che indica legame tra latente e osservate
#  +  indica la concatenazione, non la somma
mod_visual <- " percezione =~ x1 + x2 + x3 "
mod_visual_fit <- cfa(model = mod_visual, data = HolzingerSwineford1939)
summary(mod_visual_fit)
summary(mod_visual_fit, standardized = TRUE)
library(semPlot)
semPaths(object= mod_visual_fit, what= 'model', whatLabels = 'est')
library(corrplot)
R = cor(mtcars)
R
corrplot(R)
corrplot(R, type = 'upper', method='ellipse')
heatmap(R)
?heatmap
heatmap(R, scale='column')
corrplot(R, type = 'upper', method='ellipse', order = 'hclut')
corrplot(R, type = 'upper', method='ellipse', order = 'hclust')
?corrplot
hclust(R)
?hclust
hclust(R, method = "complete", members = NULL)
d<-dist(mtcars, method = "euclidean")
#i metodi possibili per la distanza sono "aitchison", "euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski"
h<-hclust(d)
h
plot(h)
dist
?cist
?dist
corrplot(Rs, type = 'upper', method='ellipse')
Rs = cor(mtcars, method = 'spearman')
corrplot(Rs, type = 'upper', method='ellipse')
heatmap(Rs, scale='column')
corrplot(Rs, type = 'upper', method='ellipse', order = 'hclust')
heatmap(Rs, scale='column')
corrplot(Rs, type = 'upper', method='ellipse', order = 'hclust')
library(qgraph)
qgraph(Rs, minimum = 0.2)
qgraph(Rs, minimum = 0.3)
qqnorm(mtcars$disp)
str(mtcars)
qqnorm(mtcars$cyl)
qqnorm(mtcars)
qqnorm(mtcars$mpg)
qqnorm(mtcars$drat)
qqnorm(mtcars$qsec)
qqnorm(mtcars$vs)
qqnorm(mtcars$dist)
qqnorm(mtcars$disp)
setwd("C:/Users/franc/OneDrive - Università degli Studi di Padova/Università-PC-senzaMilza/3° Anno/Testing/Integraztive")
load('casi_studio/080222/dati_esame.Rdata')
str(dass21)
summary(dass21)
dass21$Gender = NULL
summary(dass21)
dass21$Gender = NULL
corrplot(R, type = 'upper', method='ellipse')
R = cor(dass21)
corrplot(R, type = 'upper', method='ellipse')
corrplot(R, type = 'upper', method='ellipse', order = 'hclust')
R = cor(dass21, method='spearman')
corrplot(R, type = 'upper', method='ellipse')
corrplot(R, type = 'upper', method='ellipse', order = 'hclust')
qgraph(R, minimum = 0.3)
heatmap(R, scale='column')
corrplot(R, type = 'upper', method='ellipse')
corrplot(R, type = 'upper', method='ellipse', order = 'hclust')
library(semPlot)
library(semPlot)
mod_visual_fit <- cfa(model = mod_visual, data = HolzingerSwineford1939, std.lv = TRUE)
# UTILIZZATA METRICA ULI
# estimate(latent) = lambda
# estimate(variances) = teta delta
# estimate(percezione) = fi 11
summary(mod_visual_fit)
Sy = cov(HolzingerSwineford1939[,7:15])
print(Sy)
apply(X = HolzingerSwineford1939[,7:15], MARGIN = 2, FUN = mean)
hz_std = sscale(x = HolzingerSwineford1939[,7:15], center = TRUE, scale = FALSE)  #centrare variabili
hz_std = scale(x = HolzingerSwineford1939[,7:15], center = TRUE, scale = FALSE)  #centrare variabili
apply(X = hz_std, MARGIN = 2, FUN = mean)
apply(X = hz_std, MARGIN = 2, FUN = var) #ora le medie tendono a zero
Sy = cov(hz_std)
print(Sy)
mod_visual_fit(model = mod_visual, sample.cov = Sy, sample.nobs = 301)
mod_visual_fit <- cfa(model = mod_visual, data = HolzingerSwineford1939, std.lv = TRUE) #standardizza secondo uli (FALSE UVI, TRUE ULI)
mod_visual_fit<-cfa(model = mod_visual, sample.cov = Sy, sample.nobs = 301)
# UTILIZZATA METRICA ULI
# estimate(latent) = lambda
# estimate(variances) = teta delta
# estimate(percezione) = fi 11
summary(mod_visual_fit)
model_visual_stimato = inspect( object = mod_visual_fit, what= 'est') #con what = std  standardizza le matrici stimate
summary(model_visual_stimato)
print(model_visual_stimato)
lambda = model_visual_stimato$lambda
lambda = model_visual_stimato$lambda
Phi = model_visual_stimato$psi
Theta_delta = model_visual_stimato$theta
Theta_delta = model_visual_stimato$theta #varianza residui mentre varianza degli errori 0
model_two = " percezione =~ x1 + x2 + x3 \n  eta2 =~ x4 + x5 + x6 \n  eta3 =~ x7 + x8 + x9 \n  eta1 ~~ 0*eta2 " #eta1 ~~ 0*eta2 correlazione tra le due settata a 0
print(model_two)
