diff=compute_difficulty(database_path = "data/database_gen_testing.rda",items_sampled = list_items_sampled$overall)
# Create rational exam ----------------------------------------------------
## create harder or easier exams
list_items_sampled = rational_exam(database_path = "data/database_gen_testing.rda",args = as.character(whichTopics),n = c(1,1,7,11),typeItems = "errors",selectItems = "lastN")
diff=compute_difficulty(database_path = "data/database_gen_testing.rda",items_sampled = list_items_sampled$overall)
# Create rational exam ----------------------------------------------------
## create harder or easier exams
list_items_sampled = rational_exam(database_path = "data/database_gen_testing.rda",args = as.character(whichTopics),n = c(1,1,7,11),typeItems = "errors",selectItems = "firstN")
diff=compute_difficulty(database_path = "data/database_gen_testing.rda",items_sampled = list_items_sampled$overall)
# Create exam via min/mid/max difficulty criterion -----------------------------------
res = choose_test(database_path = "data/database_gen_testing.rda",trace_past = TRUE,name_exam="testing",past_exam_date = "09-02-21",n = c(1,1,7,11),list_items = list_items,N = 2000,criterio = "mid")
list_items_sampled = res$list_items_sampled
list_items_sampled
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1$solutions = mapply(function(i)ex_v1[[1]][[i]]$metainfo$solution,1:length(ex_v1[[1]]))
ex_v1$code_exam = code_exam; ex_v1$name_exam = name_exam; ex_v1$date_exam = date_exam; ex_v1$ver_exam = vers_exam
t(ex_v1$solutions)
ex_v1$`01092900000`$exercise7$metainfo$file
ex_v1$`01092900000`$exercise07$metainfo$file
ex_v1$`01092900000`$exercise08$metainfo$file
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1$`01092900000`$exercise09$metainfo$file
ex_v1$`01092900000`$exercise16$metainfo$file
ex_v1 = generate_exam(final = FALSE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v2=ex_v3=NA
ex_v1 = generate_exam(final = TRUE,output = "standard",list_items = list_items_sampled$overall,code_exam=code_exam,name_exam = name_exam,vers_exam = vers_exam,date_exam = date_exam,
n_items = 20,random_item = FALSE,file_intro = "header/header_testing.tex",duplex=FALSE,blanck_pages = 2,edir = "domande/")
ex_v1$solutions = mapply(function(i)ex_v1[[1]][[i]]$metainfo$solution,1:length(ex_v1[[1]]))
ex_v1$code_exam = code_exam; ex_v1$name_exam = name_exam; ex_v1$date_exam = date_exam; ex_v1$ver_exam = vers_exam
ex_v2=ex_v3=NA
# Save built exam ---------------------------------------------------------
exam_vers = list(ex_v1,ex_v2,ex_v3)#,ex_vS)
save(exam_vers,file = paste("data/",paste(name_exam,date_exam,sep="_"),".rda",sep=""))
update_exams(code_exam = code_exam,name_exam = name_exam,xdate = date_exam,list_items = list_items_sampled$overall,edir = "data/")
# Save moodle version (just in case of a computerized exam) ---------------
#random_answers=FALSE
itemslist = mapply(function(k)paste0(ex_v1$`01092900000`[[k]]$metainfo$file,".Rnw"),1:length(ex_v1[[1]]))
itemslist
exams::exams2moodle(file = itemslist,dir = "temp/",edir = "domande/",encoding = "UTF-8",n = 1,verbose = TRUE) #v1
refine_moodleQuiz(filequiz = "temp/moodlequiz.xml") #change last stuffs
rm(list=ls()); graphics.off(); options(warn=-1)
setwd("~/MEGA/Lavoro_sync/Esami/")
library(exams)
source("utilities.R")
options(digits = 4)
rm(list=ls());graphics.off();
mod=1 #0: solo domande; 1:domande+risposte
currdir = paste(strsplit(date_exam,"-")[[1]],collapse = "")
main = paste0("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/",currdir,"/")
system(command = paste0("rm ",main,"*.gz")); system(command = paste0("rm ",main,"*.aux")); system(command = paste0("rm ",main,"*.log"));
system(command = paste0("rm ",main,"*.out")); system(command = paste0("rm ",main,"main-*")); system(command = paste0("rm ",main,"unnamed-chunk*"));
system(command = paste0("rm ",main,"*.tex"));
system(command = paste0("rm -r ",main,"cache"))
system(command = paste0("rm -r ",main,"figure"))
setwd("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/110621/")
rm(list=ls())
setwd("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/110621/")
datax = read_csv("HILS3 and SWLS3 T1 Raw Open.csv")
datax = read.csv(file = "HILS3 and SWLS3 T1 Raw Open.csv",header = TRUE)
datax = read.csv(file = "Kjell and Diener 2020_data/HILS3 and SWLS3 T1 Raw Open.csv",header = TRUE)
str(datax)
table(datax$Control)
#Removing those not answering the control question correct
table(datax$Control)
datax = dataSTUDY[dataSTUDY$Control==4,]
datax = datax[dataSTUDY$Control==4,]
datax = datax[datax$Control==4,]
datax
table(datax$Control)
nrow(datax)
#1=Female; 2=Male; 3= Other
table(datax$Gender)
mean(datax$age)
sd(datax$age)
mean(datax$CompletionTime)
sd(datax$CompletionTime)
# Reading T2 data
t1t2 <- read.csv(file = "HILS3 and SWLS3 T2 Raw Open.csv",header = TRUE)
# Reading T2 data
t1t2 <- read.csv(file = "Kjell and Diener 2020_data/HILS3 and SWLS3 T2 Raw Open.csv",header = TRUE)
colnames(t1t2)
table(t1t2$Control_T2)
nrow(t1t2)
#removing those who answer control question wrong
t1t2 <- t1t2[t1t2$Control_T2==4, ]
t1t2
mean(datax$age)
#1=Female; 2=Male; 3= Other
datax$age = datax$age.x
# 1=Female; 2=Male; 3= Other
table(t1t2$Gender)
mean(t1t2$age)
sd(t1t2$age)
mean(t1t2$CompletionTime)
sd(t1t2$CompletionTime)
#Times between T1 and T2
t1t2$startdate
t1t2$submitdate_T2
t1t2$submitdate_T2
t1t2$startdate_1 <- as.POSIXct(t1t2$startdate, format='%m/%d/%Y %H:%M:%S')
t1t2$startdate_1
t1t2$submitdate_T2_1 <- as.POSIXct(t1t2$submitdate_T2, format='%m/%d/%Y %H:%M:%S')
#Create Time difference and remove time stamps
t1t2$T1T2time_Dif <- difftime(t1t2$submitdate_T2_1, t1t2$startdate_1, units="days")
mean(t1t2$T1T2time_Dif)
sd(t1t2$T1T2time_Dif)
t1t2
t1t2$T1T2time_Dif
t1t2
View(t1t2)
View(t1t2)
str(datax)
t1t2
str(t1t2)
datax[,5:7]
head(datax[,5:7])
head(datax[,5:7])
hist(t1t2$HILS1_T2)
hist(t1t2$HILS2)
View(datax)
View(t1t2)
View(t1t2)
t1t2$CompletionTime
mean(t1t2$CompletionTime)
mean(t1t2$CompletionTime_T2)
mean(t1t2$CompletionTime)
str(t1t2)
datax = data.frame()
datax$id = t1t2$id
datax = cbind(t1t2$id,)
rm(datax)
datax = cbind(t1t2$id,)
datax = cbind(t1t2$id,t1t2$HILS1)
datax = cbind(t1t2$id,t1t2$HILS1,t1t2$HILS2,t1t2$HILS3)
datax = cbind(t1t2$id,t1t2$HILS1,t1t2$HILS2,t1t2$HILS3,t1t2$SWLS1,t1t2$SWLS2,t1t2$SWLS3)
datax
table(t1t2$Country.of.Birth)
table(t1t2$Current.Country.of.Residence)
table(t1t2$Employment.Status)
str(t1t2)
table(t1t2$Nationality)
table(t1t2$Highest.education.level)
table(t1t2$First.Language)
table(t1t2$Fluent.languages)
datax = cbind(t1t2$id,t1t2$Gender,t1t2$age.x,t1t2$HILS1,t1t2$HILS2,t1t2$HILS3,t1t2$SWLS1,t1t2$SWLS2,t1t2$SWLS3,t1t2$CompletionTime,
t1t2$HILS1_T2,t1t2$HILS2_T2,t1t2$HILS3_T2,t1t2$SWLS1_T2,t1t2$SWLS2_T2,t1t2$SWLS3_T2,t1t2$CompletionTime_T2)
datax = data.frame(cbind(t1t2$id,t1t2$Gender,t1t2$age.x,t1t2$HILS1,t1t2$HILS2,t1t2$HILS3,t1t2$SWLS1,t1t2$SWLS2,t1t2$SWLS3,t1t2$CompletionTime,
t1t2$HILS1_T2,t1t2$HILS2_T2,t1t2$HILS3_T2,t1t2$SWLS1_T2,t1t2$SWLS2_T2,t1t2$SWLS3_T2,t1t2$CompletionTime_T2))
datax
colnames(datax)
paste0("HILS",1:3)
paste0(paste0("HILS",1:3),"_t1"
paste0(paste0("HILS",1:3),"_t1")
colnames(datax) = c("Id","Gender","Age",paste0(paste0("HILS",1:3),"_t1"),paste0(paste0("SWLS",1:3),"_t1"),"CompleteTime_t1",paste0(paste0("HILS",1:3),"_t2"),paste0(paste0("SWLS",1:3),"_t2"),"CompleteTime_t2")
str(datax)
datax$Id = as.character(datax$Id)
datax$Gender = factor(x = datax$Gender,levels = 1:3,labels = c("F","M","Other"))
datax
str(datax)
save(datax,file = "hils_swls.Rda")
t1t2
summary(t1t2$T1T2time_Dif)
mean(t1t2$T1T2time_Dif)
min(t1t2$T1T2time_Dif)
max(t1t2$T1T2time_Dif)
datax
datax$CompleteDays = t1t2$T1T2time_Dif
save(datax,file = "data_esame.Rda")
save(datax,file = "dati_esame.Rda")
load(paste0(main,"dati_esame.Rdata"))
rm(list=ls());graphics.off();
mod=1 #0: solo domande; 1:domande+risposte
date_exam = "11-06-21"
currdir = paste(strsplit(date_exam,"-")[[1]],collapse = "")
main = paste0("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/",currdir,"/")
#date_exam = format(Sys.Date(), "%d-%m-%Y")
main = paste0("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/",currdir,"/")
main
library(lavaan)
load(paste0(main,"dati_esame.Rdata"))
load(paste0(main,"dati_esame.Rdata"))
summary(datax)
NROW(datax)
summary(datax)
str(datax)
mean(datax$Age[datax$Age==M])
mean(datax$Age[datax$Age=="M"])
psych::describe.by(datax$Age,"Age")
str(datax)
mean(datax$Age[datax$Gender=="M"])
date_exam = "11-06-21"
currdir = paste(strsplit(date_exam,"-")[[1]],collapse = "")
main = paste0("/home/antonio/MEGA/Lavoro_sync/Esami/prove_scritte/",currdir,"/")
system(command = paste0("rm ",main,"*.gz")); system(command = paste0("rm ",main,"*.aux")); system(command = paste0("rm ",main,"*.log"));
system(command = paste0("rm ",main,"*.out")); system(command = paste0("rm ",main,"main-*")); system(command = paste0("rm ",main,"unnamed-chunk*"));
system(command = paste0("rm ",main,"*.tex"));
system(command = paste0("rm -r ",main,"cache"))
system(command = paste0("rm -r ",main,"figure"))
barplot(table(datax$HILS1_t1))
par(mfrow=c(2,3))
barplot(table(datax$HILS1_t1)); barplot(table(datax$HILS1_t2)); barplot(table(datax$HILS1_t3))
par(mfrow=c(2,3))
barplot(table(datax$HILS1_t1)); barplot(table(datax$HILS1_t2)); barplot(table(datax$HILS1_t3))
barplot(table(datax$HILS3_t1))
barplot(table(datax$HILS1_t1)); barplot(table(datax$HILS1_t2)); barplot(table(datax$HILS3_t1))
par(mfrow=c(2,3))
barplot(table(datax$HILS1_t1)); barplot(table(datax$HILS1_t2)); barplot(table(datax$HILS3_t1))
barplot(table(datax$HILS1_t1),main = "HILS_1"); barplot(table(datax$HILS1_t2)); barplot(table(datax$HILS3_t1))
barplot(table(datax$HILS1_t1),main = "HILS_1"); barplot(table(datax$HILS1_t1),main = "HILS_2"); barplot(table(datax$HILS3_t1),main = "HILS_3")
barplot(table(datax$SWLS1_t1),main = "SWLS_1"); barplot(table(datax$SWLS1_t2),main = "SWLS_2"); barplot(table(datax$SWLS1_t1),main = "SWLS_3")
psych::describe(datax$HILS1_t1)
psych::describe(datax[,5:6])
psych::describe(datax[,4:6])
psych::describe(datax[,4:9])
View(datax)
psych::describe(datax[,4:9])[,c("n","mean")]
psych::describe(datax[,4:9])
str(psych::describe(datax[,4:9]))
psych::describe(datax[,4:9])[c("n","mean")]
psych::describe(datax[,4:9])[,c("n","mean")]
A=psych::describe(datax[,4:9])
A$vars
A[,1]
A[1]
A[[1]]
res = psych::describe(datax[,4:9])
cbind(res$n)
cbind(res$vars)
print(res)
psych::alpha(x = datax[,3:6])
psych::alpha(x = datax[,3:9])
psych::alpha(x=datax[,c(3:6)])
#SWLS
psych::alpha(x=datax[,c(7:9)])
psych::alpha(x=datax[,c(11:13)]) #HILS t2
psych::alpha(x=datax[,c(14:16)]) #SWLS t2
source("/home/antonio/MEGA/Lavoro_sync/Didattica/2020_2021/testing_psicologico/laboratorio/utilities/reliability.R")
coef_alpha(datax[,4:6])
psych::alpha(x=datax[,c(4:6)]) #HILS t1
coef_alpha(datax[,4:6])
apply(datax[,4:6],1,sum)
apply(datax[,4:6],1,sum)*coef_alpha(datax[,4:6])
apply(datax[,4:6],1,sum)*sqrt(coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(coef_alpha(datax[,4:6])) / (var(apply(datax[,4:6],1,sum))*sqrt(coef_alpha(datax[,4:6]))+var(apply(datax[,4:6],1,sum))*sqrt(1-coef_alpha(datax[,4:6])))
apply(datax[,4:6],1,sum)*sqrt(1-coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(1-coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(coef_alpha(datax[,4:6]))
var(apply(datax[,4:6],1,sum))*sqrt(1-coef_alpha(datax[,4:6]))
apply(datax[,4:6],1,sum)
datax[,4:6]
datax
coef_alpha(datax[,11:13]) #HILS t2
ytot_t2 = apply(datax[,11:13],1,sum) #HILS t2
ytot_t2
ytot_t1 = apply(datax[,4:6],1,sum) #HILS t1
ytot_t2 = apply(datax[,11:13],1,sum) #HILS t2
cor(ytot_t1,ytot_t2)
plot(ytot_t1,ytot_t2,bty="n",xlab = "HILS t1",ylab="HILS t2")
table(ytot_t1,ytot_t2)
chisq.test(table(ytot_t1,ytot_t2))
psych::polychoric(table(ytot_t1,ytot_t2))
psych::polychoric(ytot_t1ytot_t2)
psych::polychoric(ytot_t1,ytot_t2)
?cor
table(ytot_t1,ytot_t2)
prop.table(ytot_t1,ytot_t2)
table(ytot_t1,ytot_t2)
mosaic.plot(table(ytot_t1,ytot_t2))
mosaicplot(table(ytot_t1,ytot_t2))
str(datax)
model1 = "eta=~HILS1_t1+HILS2_t1+HILS3_t1+SWLS1_t1+SWLS2_t1+SWLS3_t1"
datax[,4:9]
for(j in 4:9){
datax[,j] = factor(datax[,j],ordered=TRUE)
}
str(datax)
X = matrix(NA,NROW(X),6)
X = matrix(NA,NROW(datax),6)
for(j in (4:9)){
X[,j] = factor(datax[,j],ordered=TRUE)
}
for(j in (4:9)){
datax[,j] = factor(datax[,j],ordered=TRUE)
}
datax[,j]
model1 = "eta=~HILS1_t1+HILS2_t1+HILS3_t1+SWLS1_t1+SWLS2_t1+SWLS3_t1"
fit1_M = lavaan::cfa(model = model1,data = datax,ordered = c("HILS1_t1","HILS2_t1","HILS3_t1","SWLS1_t1","SWLS2_t1","SWLS3_t1"),estimator="DWLS")
fit1_M
summary(fit1_M)
summary(fit1_M)
print(fit1_M)
res1_M = lavaan::inspect(fit1_M,what="std.all")
res1_M
res1_M = lavaan::inspect(fit1_M,what="std.all")
Xout = cbind(res1_M$lambda,diag(res1_M$theta),res1_M$psi)
res1_M$lambda
diag(res1_M$theta)
res1_M$psi
cbind(res1_M$lambda,diag(res1_M$theta),res1_M$psi)
Xout = cbind(res1_M$lambda,diag(res1_M$theta),rep(res1_M$psi),6)
Xout
Xout = cbind(res1_M$lambda,diag(res1_M$theta),rep(res1_M$psi,6))
Xout
colnames(Xout)=c("lambda","diag(ThetaDelta)","phi")
print(Xout)
fitMeasures(fit1_M,fit.measures = c("RMSEA","CFI","chisq","df","npar"))
fitMeasures(fit1_M,fit.measures = c("RMSEA","CFI","chisq","df","npar"))
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1
SWLS=~SWLS1_t1+SWLS2_t1+SWLS3_t1"
fit2
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1\n
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1 \n SWLS=~SWLS1_t1+SWLS2_t1+SWLS3_t1"
"HILS=~HILS1_t1+HILS2_t1+HILS3_t1 \n SWLS=~SWLS1_t1+SWLS2_t1+SWLS3_t1"
model2 = "HILS=~HILS1_t1+HILS2_t1+HILS3_t1 \n SWLS=~SWLS1_t1+SWLS2_t1+SWLS3_t1"
fit2 = lavaan::cfa(model = model2,data = datax,
ordered = c("HILS1_t1","HILS2_t1","HILS3_t1",
"SWLS1_t1","SWLS2_t1","SWLS3_t1"),
estimator="DWLS")
fit2
res2 = lavaan::inspect(fit2,what="std.all")
res2
res2$psi
Xout = cbind(res2$lambda,diag(res2$theta),rep(res2$psi[2,1],6))
Xout
Xout = cbind(res2$lambda,diag(res2$theta),rep(res2$psi[2,1],6),res1$lambda,diag(res1$theta),0)
res1 = lavaan::inspect(fit1,what="std.all")
fit1 = lavaan::cfa(model = model1,data = datax,
ordered = c("HILS1_t1","HILS2_t1","HILS3_t1",
"SWLS1_t1","SWLS2_t1","SWLS3_t1"),
estimator="DWLS")
res1 = lavaan::inspect(fit1,what="std.all")
Xout = cbind(res2$lambda,diag(res2$theta),rep(res2$psi[2,1],6),res1$lambda,diag(res1$theta),0)
Xout = cbind(res2$lambda,diag(res2$theta),res2$psi[2,1],res1$lambda,diag(res1$theta),0)
Xout
colnames(Xout)=c("M2_lambda","M2_diag(ThetaDelta)","M2_phi12","M1_lambda","M1_diag(ThetaDelta)","M1_phi12")
Xout = cbind(res2$lambda,diag(res2$theta),res2$psi[2,1],res1$lambda,diag(res1$theta),0)
colnames(Xout)=c("M2_lambda","M2_diag(ThetaDelta)","M2_phi12","M1_lambda","M1_diag(ThetaDelta)","M1_phi12")
Xout = cbind(res2$lambda,diag(res2$theta),res2$psi[2,1],res1$lambda,diag(res1$theta),0)
Xout
colnames(Xout)=c("M2_lambda","M2_diag(ThetaDelta)","M2_phi12","M1_lambda","M1_diag(ThetaDelta)","M1_phi12")
colnames(Xout)
colnames(Xout)=c("M2_lambda1","M2_lambda2","M2_diag(ThetaDelta)","M2_phi12","M1_lambda","M1_diag(ThetaDelta)","M1_phi12")
print(Xout)
fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar"))
Yout = rbind(fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar")),
fitMeasures(fit1,fit.measures = c("RMSEA","CFI","chisq","df","npar")))
rownames(Yout)=c("mod2","mod1")
print(Yout)
fit2
print(round(Yout,4))
round(fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar")),4)
round(fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar")),5)
print(Yout)
Yout = rbind(fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar","AIC")),
fitMeasures(fit1,fit.measures = c("RMSEA","CFI","chisq","df","npar","AIC")))
rownames(Yout)=c("mod2","mod1")
print(Yout)
Yout = rbind(fitMeasures(fit2,fit.measures = c("RMSEA","CFI","chisq","df","npar","aic")),
fitMeasures(fit1,fit.measures = c("RMSEA","CFI","chisq","df","npar","aic")))
rownames(Yout)=c("mod2","mod1")
print(Yout)
print(Xout)
fit
fit1
6*(6+1)/2
(6*(6+1))/2
42-21
42-21
(6*(6+1))/2
6+6+1
21-13
fit1@ParTable
fit1@Model
summary(fit1)
4+6+1
21-1
21-11
summary(fit1)
6+6+1
6*(6+1)/2
6*(6+1)/2
5+6+1
21-12
summary(fit1)
12/21
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 1)
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 1,
intercepts = FALSE)
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 1,
intercepts = FALSE,thresholds = FALSE)
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 3,
intercepts = FALSE,thresholds = FALSE)
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 3,
intercepts = TRUE,thresholds = FALSE)
semPlot::semPaths(object = fit2, whatLabels = "std.all",edge.label.cex = 0.95,
edge.color = "black",sizeMan = 7,sizeLat=8,
style = "lisrel",nDigits = 3,
intercepts = FALSE,thresholds = FALSE)
datax
datax[,c(4:9)]
head(datax[,c(4:9)])
rbind(datax[,c(4:9)],datax[,c(11:16)])
datax[,c(11:16)]
datax[,c(11:16)]
rbind(datax[,c(4:9)],datax[,c(11:16)])
rbind(matrix(datax[,c(4:9)]),matrix(datax[,c(11:16)])()
rbind(matrix(datax[,c(4:9)]),matrix(datax[,c(11:16)]))
rbind(as.matrix(datax[,c(4:9)]),as.matrix(datax[,c(11:16)]))
as.matrix(datax[,c(4:9)])
matrix(datax[,c(4:9)])
datax[,c(4:9)]
as.matrix(datax[,c(4:9)])
as.numeric(as.matrix(datax[,c(4:9)]))
reshape2::melt(datax)
datax[,c(4:9)]
as.matrix(datax[,c(4:9)])
as.matrix(as.matrix(datax[,c(4:9)]))
as.numeric(as.numeric(datax[,c(4:9)]))
as.numeric(datax[,c(4:9)])
matrix(as.numeric(as.numeric(datax[,c(4:9)])),NROW(datax),6)
as.numeric(as.numeric(datax[,c(4:9)]))
matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6)
head(matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6))
datax[,c(4:9)]
head(matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6))
head(datax[,c(4:9)])
matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6)
rbind(matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6),matrix(as.numeric(as.matrix(datax[,c(11:16)])),NROW(datax),6))
datay = rbind(matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6),matrix(as.numeric(as.matrix(datax[,c(11:16)])),NROW(datax),6))
datay = data.frame(rbind(matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6),matrix(as.numeric(as.matrix(datax[,c(11:16)])),NROW(datax),6)))
datay
datay$time = rep(c("1","2"),each=NROW(datax))
str(datay)
colnames(datay) = c(paste0("HILS",1:3),paste0("SWLS",1:3))
str(datay)
colnames(datay) = c(paste0("HILS",1:3),paste0("SWLS",1:3),"time")
str(datay)
model1
model2
#modello CFA configurale
fit_conf = lavaan::cfa(model = model2,group = swls_data$groupLabel,data=datay)
#ricodifica del dataset dalla forma "wide" a quella "long"
datay = data.frame(rbind(
matrix(as.numeric(as.matrix(datax[,c(4:9)])),NROW(datax),6),
matrix(as.numeric(as.matrix(datax[,c(11:16)])),NROW(datax),6)))
#aggiunta della variabile tempo al nuovo dataset
datay$time = rep(c("1","2"),each=NROW(datax))
#assegnazione dei nomi di colonna al nuovo dataset
colnames(datay) = c(paste0("HILS",1:3),paste0("SWLS",1:3),"time")
#modello CFA configurale
model_inv = "HILS=~HILS1+HILS2+HILS3 \n SWLS=~SWLS1+SWLS2+SWLS3"
fit_conf = lavaan::cfa(model = model_inv,group = swls_data$groupLabel,data=datay)
fit_conf = lavaan::cfa(model = model_inv,group = datay$time,data=datay)
#aggiunta della variabile tempo al nuovo dataset
datay$time = as.factor(rep(c("1","2"),each=NROW(datax)))
fit_conf = lavaan::cfa(model = model_inv,group = datay$time,data=datay)
str(datay)
#aggiunta della variabile tempo al nuovo dataset
datay$time = rep(c("1","2"),each=NROW(datax))
datay$time
datay
fit_conf = lavaan::cfa(model = model_inv,group = datay$time,data=datay)
summary(datay)
table(datay$time)
299*2
#aggiunta della variabile tempo al nuovo dataset
datay$time = rep(c(1,2),each=NROW(datax))
fit_conf = lavaan::cfa(model = model_inv,group = datay$time,data=datay)
fit_conf = lavaan::cfa(model = model_inv,group = "time",data=datay)
#aggiunta della variabile tempo al nuovo dataset
datay$time = rep(c("1","2"),each=NROW(datax))
fit_conf = lavaan::cfa(model = model_inv,group = "time",data=datay)
fit_conf
#modello CFA debole
fit_deb = lavaan::cfa(model = model_inv,group = "time",data=datay,
group.equal=c("loadings"))
lavaan::anova(fit1_conf,fit1_deb)
fit_conf = lavaan::cfa(model = model_inv,group = "time",data=datay)
#modello CFA debole
fit_deb = lavaan::cfa(model = model_inv,group = "time",data=datay,
group.equal=c("loadings"))
lavaan::anova(fit1_conf,fit1_deb)
lavaan::anova(fit_conf,fit_deb)
sd(datax$CompleteDays[datax$Gender=="F"],3)
round(sd(datax$CompleteDays[datax$Gender=="F"],3))
round(sd(datax$CompleteDays[datax$Gender=="F"],4))
rm(list=ls());graphics.off();
q()
